{"version":3,"file":"tr.js","sources":["../../../../src/components/hds/table/tr.hbs","../../../../src/components/hds/table/tr.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n\\n<tr class=\\\"hds-table__tr\\\" ...attributes>\\n  {{#if @isSelectable}}\\n    <Hds::Table::ThSelectable\\n      @isSelected={{@isSelected}}\\n      @selectionScope={{@selectionScope}}\\n      @selectionKey={{this.selectionKey}}\\n      @selectionAriaLabelSuffix={{@selectionAriaLabelSuffix}}\\n      @didInsert={{@didInsert}}\\n      @willDestroy={{@willDestroy}}\\n      @onSelectionChange={{@onSelectionChange}}\\n    />\\n  {{/if}}\\n\\n  {{yield}}\\n</tr>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\nimport { HdsTableScopeValues } from './types.ts';\nimport type { HdsTableScope } from './types.ts';\nimport type { HdsFormCheckboxBaseSignature } from '../form/checkbox/base';\n\nexport interface BaseHdsTableTrArgs {\n  Args: {\n    isSelectable?: boolean;\n    isSelected?: false;\n    selectionAriaLabelSuffix?: string;\n    selectionKey?: string;\n    selectionScope: HdsTableScope;\n    didInsert: (\n      checkbox: HdsFormCheckboxBaseSignature['Element'],\n      selectionKey?: string\n    ) => void;\n    onSelectionChange: (\n      checkbox?: HdsFormCheckboxBaseSignature['Element'],\n      selectionKey?: string\n    ) => void;\n    willDestroy: () => void;\n  };\n  Blocks: {\n    default: [];\n  };\n  Element: HTMLTableRowElement;\n}\n\n// Extended interface for selectable rows\nexport interface SelectableHdsTableTrArgs extends BaseHdsTableTrArgs {\n  Args: BaseHdsTableTrArgs['Args'] & {\n    isSelectable: true;\n    selectionScope: HdsTableScopeValues.Row;\n    selectionKey: string; // Now required for selectable rows\n  };\n}\n\n// Union type to combine both possible states\nexport type HdsTableTrArgs = BaseHdsTableTrArgs | SelectableHdsTableTrArgs;\n\nexport default class HdsTableTrComponent extends Component<HdsTableTrArgs> {\n  /**\n   * @param selectionKey\n   * @type {string}\n   * @default undefined\n   */\n  get selectionKey(): string | undefined {\n    if (this.args.isSelectable && this.args.selectionScope === 'row') {\n      assert(\n        `@selectionKey must be defined on Table::Tr or B.Tr when @isSelectable is true`,\n        this.args.selectionKey\n      );\n      return this.args.selectionKey;\n    }\n    return undefined;\n  }\n}\n"],"names":["HdsTableTrComponent","Component","selectionKey","args","isSelectable","selectionScope","assert","undefined","setComponentTemplate","TEMPLATE"],"mappings":";;;;;AACA,eAAe,kBAAkB,CAAC,4gBAA4gB;;ACD9iB;AACA;AACA;AACA;;AA2Ce,MAAMA,mBAAmB,SAASC,SAAS,CAAiB;AACzE;AACF;AACA;AACA;AACA;EACE,IAAIC,YAAYA,GAAuB;AACrC,IAAA,IAAI,IAAI,CAACC,IAAI,CAACC,YAAY,IAAI,IAAI,CAACD,IAAI,CAACE,cAAc,KAAK,KAAK,EAAE;MAChEC,MAAM,CACJ,+EAA+E,EAC/E,IAAI,CAACH,IAAI,CAACD,YACZ,CAAC,CAAA;AACD,MAAA,OAAO,IAAI,CAACC,IAAI,CAACD,YAAY,CAAA;AAC/B,KAAA;AACA,IAAA,OAAOK,SAAS,CAAA;AAClB,GAAA;AACF,CAAA;AAACC,oBAAA,CAAAC,QAAA,EAhBoBT,mBAAmB,CAAA;;;;"}